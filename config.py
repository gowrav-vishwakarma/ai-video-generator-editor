import os
from dataclasses import dataclass
from typing import Tuple

@dataclass
class ContentConfig:
    """Configuration for content generation"""
    # Video settings
    target_video_length_hint: float = 30.0  # Target total video length for LLM guidance
    
    # Max duration a single video chunk generated by the model can be
    # (e.g., SVD generates ~2-4 secs effectively, ModelScope similar)
    model_max_video_chunk_duration: float = 3.0 
    
    # Final output resolution (e.g., 1080x1920 for Instagram Reels)
    target_resolution: Tuple[int, int] = (1080, 1920)
    
    # Generation resolution (half of target for efficiency)
    # These will be automatically calculated based on target_resolution
    @property
    def generation_resolution(self) -> Tuple[int, int]:
        width = self.target_resolution[0] // 2
        height = self.target_resolution[1] // 2
        # Ensure dimensions are divisible by 8 (required by most models)
        width = (width // 8) * 8
        height = (height // 8) * 8
        return (width, height)
    
    # Minimum dimensions for generation (to ensure quality)
    min_generation_width: int = 256
    min_generation_height: int = 256
    
    # FPS settings
    fps: int = 8
    
    # Scene settings (for LLM guidance)
    min_scenes: int = 2  # Min narration/visual scene pairs from LLM
    max_scenes: int = 5  # Max narration/visual scene pairs from LLM
    # LLM hint for how long each narration part should ideally be
    max_scene_narration_duration_hint: float = 5.0 
    
    # Model settings
    use_svd_flow: bool = True  # Use SDXL -> SVD flow instead of direct T2V
    
    # Output settings
    output_dir: str = "instagram_content"
    
    def __post_init__(self):
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Validate aspect ratio
        aspect_ratio = self.target_resolution[0] / self.target_resolution[1]
        if not (0.5 <= aspect_ratio <= 2.0):  # Allow common aspect ratios (1:2 to 2:1)
            raise ValueError(f"Invalid aspect ratio: {aspect_ratio}. Must be between 0.5 and 2.0")
        
        # Validate generation dimensions
        gen_width, gen_height = self.generation_resolution
        if gen_width < self.min_generation_width or gen_height < self.min_generation_height:
            raise ValueError(f"Generation resolution {gen_width}x{gen_height} is below minimum {self.min_generation_width}x{self.min_generation_height}") 